//#include Observer.js::base

/**
 * @class Component
 * @extends Object
 * Маленький класс, содержащий в себе возможность передавать в конструктор объект, свойства которого
 * становятся свойствами результирующего объекта. Это позволяет создавать цепочки классов, в которых можно
 * указывать умолчательные значения свойств, и переопределять эти свойства при создании объекта. Это удобно,
 * в частности, при создании виджетов со большим деревом наследования и с большим количеством параметров у каждого.
    var C1 = Component.inherit({
        a: 1,
        b: 2,
        c: 3,

        method: function() {

        }
    });

    var C2 = C1.inherit({
        a: 2,
        c: 4
    });

    var c = new C2({
        a: 3
    });
    alert([c.a, c.b, c.c]);  // 3, 2, 4
 * Кроме этого, при создании объекта к нему автоматически биндится экземпляр {@link Observer} со всеми вытекающими:
 * возможность генерировать события и навешивать на них обработчики.
 */
var Component = Object.inherit({
    /**
     * @cfg {Object} listeners Объект с навешиваемыми обработчиками событий в формате {@link Observer#on}.
     */

    /**
     * @constructor
     * @param {Object} config Объект с конфигурационными параметрами. 
     */
    constructor: function(config) {
        /**
         * @property {Object} initialConfig Ссылка на объект, переданный при создании компонента.
         */
        this.initialConfig = config;
        Object.mixin(this, config || {});
        this.initComponent();
    },

    /**
     * Инициализация компонента. В наследуемых классах в качестве конструктора следует переопределять именно
     * этот метод, тогда до вызова родительского initComponent, когда необходимо доопределить некоторые
     * параметры, конфигурационный объект, переданный в конструктор, будет уже скопирован в this.
     */
    initComponent: function() {
        new Observer(this.listeners).bind(this);
    }
});